# package import ----------------------------------------------------------
library(tidyverse)
library(jsonlite)
library(glue)
library(data.table)
library(magrittr)
# database import ---------------------------------------------------------
# Does not work with this ("permission denied")
database <-
fireData::download("https://marineexpe.firebaseio.com", "/") %>%
write_rds(glue("backup/{as.integer(Sys.time())}.RData"))
View(database)
dataset_trust <-
database %>%
pluck("Trust_Ratings") %>%
map_dfr(~data_frame(data = list(pluck(.x))),
.id = "jspsych_id")
dataset_trust <-
database %>%
pluck("Trust_Ratings") %>%
map_dfr(~data_frame(data = list(pluck(.x))),
.id = "jspsych_id")  %>%
unnest()   %>%
mutate(data = map(data, ~data_frame(epoch  = .x$timestamp,
status = .x$status) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000))
)) %>%
unnest()
# vaast dataset -----------------------------------------------------------
dataset_trust <-
database %>%
pluck("Trust_Ratings") %>%
map_dfr(~data_frame(epoch = .x$timestamp,
jspsych_id = .x$jspsych_id,
prolific_id = .x$prolific_id,
taskOrder = .x$taskOrder,
firstblockvaast = .x$experimental_condition,
temp_data = .x$vaast_trial_data)) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000 ),
temp_data = map(temp_data, ~ fromJSON(.x))) %>%
unnest()
database[["Trust_Ratings"]][["k16dk23103c082e"]][["subdata"]]
# package import ----------------------------------------------------------
library(tidyverse)
library(jsonlite)
library(glue)
library(data.table)
library(magrittr)
# database import ---------------------------------------------------------
# Does not work with this ("permission denied")
database <-
fireData::download("https://marineexpe.firebaseio.com", "/") %>%
write_rds(glue("backup/{as.integer(Sys.time())}.RData"))
dataset_trust <-
database %>%
pluck("Trust_Ratings") %>%
map_dfr(~data_frame(data = list(pluck(.x))),
.id = "jspsych_id")
View(dataset_trust)
dataset_trust <-
database %>%
pluck("Trust_Ratings") %>%
map_dfr(~data_frame(data = list(pluck(.x))),
.id = "jspsych_id")  %>%
unnest()
View(dataset_trust)
dataset_trust <-
database %>%
pluck("Trust_Ratings") %>%
map_dfr(~data_frame(data = list(pluck(.x))),
.id = "jspsych_id")  %>%
unnest(data)
View(dataset_trust)
dataset_trust <-
database %>%
pluck("Trust_Ratings") %>%
map_dfr(~data_frame(data = list(pluck(.x))),
.id = "jspsych_id")  %>%
unnest()   %>%
mutate(data = map(data, ~data_frame(epoch  = .x$timestamp,
status = .x$status) %>%
mutate(timestamp = lubridate::as_datetime(epoch / 1000))
)) %>%
unnest()
dataset_trust <-
database %>%
pluck("Trust_Ratings") %>%
map_dfr(~data_frame(data = list(pluck(.x))),
.id = "jspsych_id")  %>%
unnest()   %>%
mutate(data = map(data, ~data_frame(subdata = .x$subdata) )) %>%
unnest()
# package import ----------------------------------------------------------
library(tidyverse)
library(jsonlite)
library(glue)
library(data.table)
library(magrittr)
# database import ---------------------------------------------------------
# Ensure that relative paths start from the same directory as this script
rstudioapi::getActiveDocumentContext()$path %>% dirname %>% setwd
json <- fromJSON("marineexpe-export (1).json")[["Trust_Ratings"]]
DT <- lapply(names(json), function(id){ fread(json[[id]]) }) %>% rbindlist
# package import ----------------------------------------------------------
library(tidyverse)
library(jsonlite)
library(RJSONIO)
library(glue)
library(data.table)
library(magrittr)
library(RJSONIO)
# database import ---------------------------------------------------------
# Ensure that relative paths start from the same directory as this script
rstudioapi::getActiveDocumentContext()$path %>% dirname %>% setwd
json <- fromJSON("marineexpe-export (1).json")[["Trust_Ratings"]]
DT <- lapply(names(json), function(id){ fread(json[[id]]) }) %>% rbindlist
# package import ----------------------------------------------------------
library(tidyverse)
#library(jsonlite)
library(RJSONIO)
library(glue)
library(data.table)
library(magrittr)
# database import ---------------------------------------------------------
# Ensure that relative paths start from the same directory as this script
rstudioapi::getActiveDocumentContext()$path %>% dirname %>% setwd
json <- fromJSON("marineexpe-export (1).json")[["Trust_Ratings"]]
DT <- lapply(names(json), function(id){ fread(json[[id]]) }) %>% rbindlist
json <- fromJSON("data/marineexpe-export (1).json")[["Trust_Ratings"]]
DT <- lapply(names(json), function(id){ fread(json[[id]]) }) %>% rbindlist
head(DT)
table(DT$trial_index)
DF_trust$faceCond<-DF_trust$face
# package import ----------------------------------------------------------
library(tidyverse)
#library(jsonlite)
library(RJSONIO)
library(glue)
library(data.table)
library(magrittr)
# database import ---------------------------------------------------------
# Ensure that relative paths start from the same directory as this script
rstudioapi::getActiveDocumentContext()$path %>% dirname %>% setwd
json <- fromJSON("data/marineexpe-export (1).json")[["Trust_Ratings"]]
DF_trust <- lapply(names(json), function(id){ fread(json[[id]]) }) %>% rbindlist
DF_trust$faceCond<-DF_trust$face
head(DF_trust)
DF_trust[, faceCond := str_match(faceCond, ".CFD-(.*?)-") %>% .[,2]]
head(DF_trust)
table(DF_trust$faceCond)
DF_trust[faceCond=="BM" & faceCond=="BM", faceCond := "B"]
head(DF_trust)
table(DF_trust$faceCond)
DF_trust[faceCond=="BM" & faceCond=="BF", faceCond := "B"]
DF_trust[faceCond=="BM" & faceCond=="BF", faceCond := "B"]
table(DF_trust$faceCond)
DF_trust[faceCond=="BM", faceCond := "B"]
# package import ----------------------------------------------------------
library(tidyverse)
#library(jsonlite)
library(RJSONIO)
library(glue)
library(data.table)
library(magrittr)
# database import ---------------------------------------------------------
# Ensure that relative paths start from the same directory as this script
rstudioapi::getActiveDocumentContext()$path %>% dirname %>% setwd
json <- fromJSON("data/marineexpe-export (1).json")[["Trust_Ratings"]]
DF_trust <- lapply(names(json), function(id){ fread(json[[id]]) }) %>% rbindlist
# We create a face condition variable
DF_trust$faceCond<-DF_trust$face
DF_trust[, faceCond := str_match(faceCond, ".CFD-(.*?)-") %>% .[,2]]
table(DF_trust$faceCond)
DF_trust[faceCond=="BM", faceCond := "B"]
DF_trust[faceCond=="BF", faceCond := "B"]
table(DF_trust$faceCond)
# package import ----------------------------------------------------------
library(tidyverse)
#library(jsonlite)
library(RJSONIO)
library(glue)
library(data.table)
library(magrittr)
# database import ---------------------------------------------------------
# Ensure that relative paths start from the same directory as this script
rstudioapi::getActiveDocumentContext()$path %>% dirname %>% setwd
json <- fromJSON("data/marineexpe-export (1).json")[["Trust_Ratings"]]
DF_trust <- lapply(names(json), function(id){ fread(json[[id]]) }) %>% rbindlist
# We create a face condition variable
DF_trust$faceCond<-DF_trust$face
DF_trust[, faceCond := str_match(faceCond, ".CFD-(.*?)-") %>% .[,2]]
# We create a new black vs. white variable
DF_trust[faceCond=="BM", faceCond := "B"]
DF_trust[faceCond=="BF", faceCond := "B"]
DF_trust[faceCond=="WM", faceCond := "W"]
DF_trust[faceCond=="WF", faceCond := "W"]
head(DF_trust)
# We keep only black and white faces
DF_trust <- subset (DF_trust, faceCond=="B" &faceCond=="B")
table(DF_trust$faceCond)
# package import ----------------------------------------------------------
library(tidyverse)
#library(jsonlite)
library(RJSONIO)
library(glue)
library(data.table)
library(magrittr)
# database import ---------------------------------------------------------
# Ensure that relative paths start from the same directory as this script
rstudioapi::getActiveDocumentContext()$path %>% dirname %>% setwd
json <- fromJSON("data/marineexpe-export (1).json")[["Trust_Ratings"]]
DF_trust <- lapply(names(json), function(id){ fread(json[[id]]) }) %>% rbindlist
# We create a face condition variable
DF_trust$faceCond<-DF_trust$face
DF_trust[, faceCond := str_match(faceCond, ".CFD-(.*?)-") %>% .[,2]]
# We create a new black vs. white variable
DF_trust[faceCond=="BM", faceCond := "B"]
DF_trust[faceCond=="BF", faceCond := "B"]
DF_trust[faceCond=="WM", faceCond := "W"]
DF_trust[faceCond=="WF", faceCond := "W"]
# We keep only black and white faces
DF_trust <- subset (DF_trust, faceCond=="B" & faceCond=="W")
table(DF_trust$faceCond)
# package import ----------------------------------------------------------
library(tidyverse)
#library(jsonlite)
library(RJSONIO)
library(glue)
library(data.table)
library(magrittr)
# database import ---------------------------------------------------------
# Ensure that relative paths start from the same directory as this script
rstudioapi::getActiveDocumentContext()$path %>% dirname %>% setwd
json <- fromJSON("data/marineexpe-export (1).json")[["Trust_Ratings"]]
DF_trust <- lapply(names(json), function(id){ fread(json[[id]]) }) %>% rbindlist
# We create a face condition variable
DF_trust$faceCond<-DF_trust$face
DF_trust[, faceCond := str_match(faceCond, ".CFD-(.*?)-") %>% .[,2]]
# We create a new black vs. white variable
DF_trust[faceCond=="BM", faceCond := "B"]
DF_trust[faceCond=="BF", faceCond := "B"]
DF_trust[faceCond=="WM", faceCond := "W"]
DF_trust[faceCond=="WF", faceCond := "W"]
# We keep only black and white faces
DF_trust <- subset (DF_trust, faceCond=="B" | faceCond=="W")
table(DF_trust$faceCond)
head(DF_trust)
DF_trust <- rename.vars (DF_trust, id, jspsych_id)
library(stringr)
DF_trust <- rename.vars (DF_trust, id, jspsych_id)
library(psych)
DF_trust <- rename.vars (DF_trust, id, jspsych_id)
library(gdata)
DF_trust <- rename.vars (DF_trust, id, jspsych_id)
DF_trust <- rename.vars (DF_trust, "id", "jspsych_id")
# To reset the workspace
rm(list=ls())
# package import ----------------------------------------------------------
library(tidyverse)
#library(jsonlite)
library(RJSONIO)
library(glue)
library(data.table)
library(magrittr)
library(gdata)
library(reshape)
# database import ---------------------------------------------------------
# Ensure that relative paths start from the same directory as this script
rstudioapi::getActiveDocumentContext()$path %>% dirname %>% setwd
json <- fromJSON("data/marineexpe-export (1).json")[["Trust_Ratings"]]
DF_trust <- lapply(names(json), function(id){ fread(json[[id]]) }) %>% rbindlist
DF_trust <- rename.vars (DF_trust, "id", "jspsych_id")
# We create a face condition variable
DF_trust$faceCond<-DF_trust$face
DF_trust[, faceCond := str_match(faceCond, ".CFD-(.*?)-") %>% .[,2]]
# We create a new black vs. white variable
DF_trust[faceCond=="BM", faceCond := "B"]
DF_trust[faceCond=="BF", faceCond := "B"]
DF_trust[faceCond=="WM", faceCond := "W"]
DF_trust[faceCond=="WF", faceCond := "W"]
# We keep only black and white faces
DF_trust <- subset (DF_trust, faceCond=="B" | faceCond=="W")
head(DF_trust)
DF_short <- cast(DF_trust,
jspsych_id + prolificID ~ faceCond,
value = "rating", # to be rerun with "RT" to compute the means and se
mean,
fill = NA)
head(DF_short)
DF_short <-
within(DF_short,
{
DiffBW   <- B - W
})
head(DF_short)
# To reset the workspace
rm(list=ls())
# package import ----------------------------------------------------------
library(tidyverse)
#library(jsonlite)
library(RJSONIO)
library(glue)
library(data.table)
library(magrittr)
library(gdata)
library(reshape)
# database import ---------------------------------------------------------
# Ensure that relative paths start from the same directory as this script
rstudioapi::getActiveDocumentContext()$path %>% dirname %>% setwd
json <- fromJSON("data/marineexpe-export (1).json")[["Trust_Ratings"]]
DF_trust <- lapply(names(json), function(id){ fread(json[[id]]) }) %>% rbindlist
DF_trust <- rename.vars (DF_trust, "id", "jspsych_id")
# We create a face condition variable
DF_trust$faceCond<-DF_trust$face
DF_trust[, faceCond := str_match(faceCond, ".CFD-(.*?)-") %>% .[,2]]
# We create a new black vs. white variable
DF_trust[faceCond=="BM", faceCond := "B"]
DF_trust[faceCond=="BF", faceCond := "B"]
DF_trust[faceCond=="WM", faceCond := "W"]
DF_trust[faceCond=="WF", faceCond := "W"]
# We keep only black and white faces
DF_trust <- subset (DF_trust, faceCond=="B" | faceCond=="W")
# Data wrangling --------------------------------------------------------------
DF_short_trust <- cast(DF_trust,
jspsych_id + prolificID ~ faceCond,
value = "rating", # to be rerun with "RT" to compute the means and se
mean,
fill = NA)
DF_short_trust <-
within(DF_short_trust,
{
DiffBW   <- B - W
})
save(DF_short_trust, file = "data/data_Trust.RData")
Qual <- fread("data/Qualtrics_data.csv")
Qual <- fread("data/Qualtrics.csv")
head(Qual)
# Qualtrics (demo info) --> we use the file registered as csv sep ; AND WE CHANGE "-" signs
# with "_" signs (because otherwise R thinks it is a minus sign)
# where we removed raw 2:53
Qual <- fread("data/Qualtrics.csv")[, c(18:36)]
# Qualtrics (demo info) --> we use the file registered as csv sep ; AND WE CHANGE "-" signs
# with "_" signs (because otherwise R thinks it is a minus sign)
# where we removed raw 2:53
Qual <- fread("data/Qualtrics.csv")[, c(18:34)]
head(Qual)
Qual <- fread("data/Qualtrics.csv")[, c(18:34)]
Qual <- rename.vars (Qual, "id", "jspsych_id")
Qual <- within(Qual,{
# EMS scale
TrustB<-rowMeans(cbind(EMS_1, EMS_2, EMS_3, EMS_4, EMS_5),na.rm=TRUE)
# Termo diff between black and white
Termo_BW<- Termometer_1 - Termometer_2
})
head(Qual)
# To reset the workspace
rm(list=ls())
# package import ----------------------------------------------------------
library(tidyverse)
#library(jsonlite)
library(RJSONIO)
library(glue)
library(data.table)
library(magrittr)
library(gdata)
library(reshape)
#-----------------------------------------------------------
#                     Trust ratings
#-----------------------------------------------------------
# Ensure that relative paths start from the same directory as this script
rstudioapi::getActiveDocumentContext()$path %>% dirname %>% setwd
json <- fromJSON("data/marineexpe-export (1).json")[["Trust_Ratings"]]
DF_trust <- lapply(names(json), function(id){ fread(json[[id]]) }) %>% rbindlist
DF_trust <- rename.vars (DF_trust, "id", "jspsych_id")
# We create a face condition variable
DF_trust$faceCond<-DF_trust$face
DF_trust[, faceCond := str_match(faceCond, ".CFD-(.*?)-") %>% .[,2]]
# We create a new black vs. white variable
DF_trust[faceCond=="BM", faceCond := "B"]
DF_trust[faceCond=="BF", faceCond := "B"]
DF_trust[faceCond=="WM", faceCond := "W"]
DF_trust[faceCond=="WF", faceCond := "W"]
# We keep only black and white faces
DF_trust <- subset (DF_trust, faceCond=="B" | faceCond=="W")
# Data wrangling --------------------------------------------------------------
DF_short_trust <- cast(DF_trust,
jspsych_id + prolificID ~ faceCond,
value = "rating", # to be rerun with "RT" to compute the means and se
mean,
fill = NA)
DF_short_trust <-
within(DF_short_trust,
{
Trust_BW   <- W - B
})
save(DF_short_trust, file = "data/data_Trust.RData")
save(Qual, file = "data/data_Qual.RData")
# Qualtrics (demo info) --> we use the file registered as csv sep ;
# here we already removed raw 2 & 3
Qual <- fread("data/Qualtrics.csv")[, c(18:34)]
Qual <- rename.vars (Qual, "id", "jspsych_id")
Qual <- within(Qual,{
# EMS scale
TrustB<-rowMeans(cbind(EMS_1, EMS_2, EMS_3, EMS_4, EMS_5),na.rm=TRUE)
# Termo diff between black and white
Termo_BW<- Termometer_2 - Termometer_1
})
save(Qual, file = "data/data_Qual.RData")
